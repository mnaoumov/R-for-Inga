library(gtools)
library(maxLik)

b=5
k=3

A=array(runif(b*k),c(b,k))
A=A-apply(A,1,mean)
A=A/sqrt(mean(A^2))
sumf=function(f) {
  s=0
  for(i in 1:b) s=s+f(i)
  s/b }

perm=function(i) permutations(k,k-1,A[i,])

expb=function(i,beta) exp(perm(i)%*%beta)

kappad2=function(beta) {
    kappad2i=function(i) { -(t(perm(i))%*%expb(i,beta)%*%t(expb(i,beta))%*%perm(i))/sum(expb(i,beta))^2+(t(perm(i))%*%diag(c(expb(i,beta)))%*%perm(i))/sum(expb(i,beta))
    }
    sumf(kappad2i)
  }

Lambda=function(x){

  kappa=function(beta) {
    kappai=function(i) log(sum(expb(i,beta))/prod(1:k))
    sumf(kappai)
  }

  kappad=function(beta) {
    kappadi=function(i) t(perm(i))%*%expb(i,beta)/sum(expb(i,beta))
    sumf(kappadi)
  }

ll=function(beta){beta%*%x-kappa(beta)}
lll=function(beta){x-kappad(beta)[,1]}
llll=function(beta){-kappad2(beta)}
lam=maxNR(ll,grad=lll,hess=llll,start=rep(0,k-1))
lam
}


getOrderedMeans = function() {
  ASorted = array(dim = c(b,k))
  for(i in 1:b)
    ASorted[i,] = sort(A[i,])

  orderedMeans = colMeans(ASorted)
  
  orderedMeans
}

orderedMeans = getOrderedMeans()

isPointInsideDomain = function(x) {
  y = x
  if (length(y) == k - 1)
    y[length(y) + 1] = -sum(y)

  stopifnot(length(y) == k)

  for (usedIndices in 1 : (k-1)) {
    subVectors = combinations(k, usedIndices, y, set = FALSE)
    subVectorSums = apply(subVectors, 1, sum)
    sumMins = sum(orderedMeans[1 : usedIndices])
    sumMaxs = sum(orderedMeans[(k - usedIndices + 1) : k])
    if (!all(subVectorSums > sumMins))
      return(FALSE);
    if (!all(subVectorSums < sumMaxs))
      return(FALSE);
  }
  return(TRUE)
}
 

Sqr=function(M){m=svd(M)$u%*%diag(sqrt(svd(M)$d))%*%t(svd(M)$v);m} 

V0h=Sqr(kappad2(rep(0,k-1)))

TailDistrMonteCarlo=function(u,M){
  delta=function(s) {
    transformed=function(r) (r*V0h%*%s)[,1]
     r=u
     tr = transformed(r)
     if (isPointInsideDomain(tr)) {
     for (i in 1:5){
          tr = transformed(r)
          if (isPointInsideDomain(tr))  
             L = Lambda (tr)
             r = r - ((L$max-u^2/2)/(L$est%*%V0h%*%s))[1,1]
     }
     betah=L$est
    }
    else {
      negative = 0
      positiveOrOutside = u

      while (TRUE)
      {
        r = (negative + positiveOrOutside) / 2
        print ("r=")
        print (r)
        tr = transformed(r)
        if (!isPointInsideDomain(tr)) {
          print("outside")
          positiveOrOutside = r
        }
        else {
          L = Lambda(tr)
          L2 = L$max - u ^ 2 / 2
          print(L2)
          if (abs(L2) < 0.001) {
             betah = L$est
             break
          }
          else if (L2 > 0)
            positiveOrOutside = r
          else if (L2 < 0)
            negative = r
        }
      }
    }
    return((det(kappad2(betah))^(-1/2)*r^(k-2)*det(V0h))/(u^(k-3)*abs(t(s)%*%V0h%*%betah)))
  } 

  IntMonteCarlo=function(h) {
  UniformOnSphere=function(n) {
    x=rnorm(n)
    r=sqrt(sum(x^2))
    x/r
  }
    r=0
    for(i in 1:M)
        r = r + h(UniformOnSphere(k-1))
    return (r / M)
  }

   cb=(b^((k-1)/2))/(2^((k-1)/2-1)*gamma((k-1)/2))
   Gb=IntMonteCarlo(delta)

LugRice=1-pchisq(b*u^2,k-1) + cb/b*u^(k-3)*exp(-b*u^2/2)*(Gb-1)
   ustar=u-log(Gb)/(b*u)
NielCox=1-pchisq(b*ustar^2,k-1)
  list(LugRice,NielCox)
}



MCRandomPerm=function(u,M) {
  counter=0
  B=A
  for(attempt in 1:M) {
    for(i in 1:b) B[i,]=sample(A[i,],k)
    p=apply(B,2,mean)[1:(k-1)]
    v = Lambda(p*0.9999)$max
    if(v>u^2/2)  counter=counter+1
  }
  counter/M
}


