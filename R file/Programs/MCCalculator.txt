# Load Libraries
library(gtools)
library(maxLik)

# Prepare matrix

b = 5
k = 3

A = array(runif(b * k), c(b, k))
A = A - apply(A, 1, mean)
A = A / sqrt(mean(A ^ 2))

# List of permutations
perm = function(i) {
  permutations(k, k-1, A[i,])
}

# \sum_{i=1}^b f(i)
sumf = function(f) {
  s = 0
  for (i in 1 : b)
    s = s + f(i)
  
  s / b
}

expb = function(i, beta) {
  exp(perm(i) %*% beta)
}

kfact = prod(1 : k)

kappa = function(beta) {
  kappai = function(i) {
    log(sum(expb(i, beta)) / kfact)
  }

  sumf(kappai)
}

kappad = function(beta) {
  kappadi = function(i) {
    temp = expb(i, beta)

    t(perm(i)) %*% temp / sum(temp)
  }

  sumf(kappadi)
}

kappad2 = function(beta) {
  kappad2i = function(i) {
    temp = expb(i, beta)

    -(t(perm(i)) %*% temp %*% t(temp) %*% perm(i)) / sum(temp) ^ 2 + (t(perm(i)) %*% diag(c(temp)) %*% perm(i)) / sum(temp)
  }

  sumf(kappad2i)
}

Lambda = function(x) {
  func = function(beta) {
    beta %*% x - kappa(beta)
  }

  funcd = function(beta) {
    x - kappad(beta)[, 1]
  }

  funcd2 = function(beta) {
    -kappad2(beta)
  }

  lam = maxNR(func, grad = funcd, hess = funcd2, start = rep(0, k - 1))
  lam
}

LambdaMax = function(x) {
  Lambda(x * 0.999)$max
}

allPossiblePermutations = list()
for (i in 1 : b)
  allPossiblePermutations[[i]] = permutations(k, k, A[i, ])

getColMeans = function(indicesVector) {
    tempMatrix = array(dim = c(b, k))
    for (i in 1 : b) {                       
      permutationsOfRow = allPossiblePermutations[[i]]
      rowPermutationIndex = indicesVector[i]
      tempMatrix[i, ] = permutationsOfRow[rowPermutationIndex, ]
    }
  
    colMeans(tempMatrix)
}

getLambdaValues = function(means) {
  LambdaValues = c()

  for (i in 1 : dim(means)[1]) {
    LambdaValue = LambdaMax(means[i, ][1 : (k - 1)])
    LambdaValues[i] = LambdaValue
  }

  LambdaValues
}


getAllPossibleMeans = function() {
  tempList = list()
  for (i in 1 : b)
    tempList[[i]] = 1 : kfact

  allIndices = expand.grid(tempList)

  matrixOfAllMeans = array(dim = c(dim(allIndices)[1], k))

  for (indicesRowIndex in 1 : dim(allIndices)[1]) {
    indicesVector = as.vector(allIndices[indicesRowIndex,], mode = "integer")
    matrixOfAllMeans[indicesRowIndex, ] = getColMeans(indicesVector )
  }

  matrixOfAllMeans
}

tailProbability = function(values, level) {
  count = 0
  for (value in values ) {
    if (value > level)
        count = count + 1
  }
  
  count / length(values)
}

# P(Lambda(x) > u^2/2)
# All permutations
allPossibleMeans = getAllPossibleMeans()
allPossibleLambdaValues = getLambdaValues(allPossibleMeans)

MonteCarloProbability = function(u) {
  tailProbability(allPossibleLambdaValues, u ^ 2 / 2)
}


# P(Lambda(x) > u^2/2)
# Random N permutations
RandomMonteCarloProbability = function(u,N) {

  randomMeans = array(dim = c(N, k))

  for (i in 1 : N) {
    randomIndicesVector = sample(1 : kfact, b, replace = TRUE)
    randomMeans[i, ] = getColMeans(randomIndicesVector)
  }

  randomLambdaValues = getLambdaValues(randomMeans)

  tailProbability(randomLambdaValues, u ^ 2 / 2)
}

Sqr=function(M){m=svd(M)$u%*%diag(sqrt(svd(M)$d))%*%t(svd(M)$v);m} 

V0h=Sqr(kappad2(rep(0,k-1)))


TailDistrMonteCarlo=function(u,M){
  delta=function(s) {
    transformed=function(r) (r*V0h%*%s)[,1]
     r=u
     for (i in 1:5){
          L = Lambda (transformed(r))
          r = r - ((L$max-u^2/2)/(L$est%*%V0h%*%s))[1,1]
     }
    betah=L$est
  return((det(kappad2(betah))^(-1/2)*r^(k-2)*det(V0h))/(u^(k-3)*abs(t(s)%*%V0h%*%betah)))
  } 

  IntMonteCarlo=function(h) {
  UniformOnSphere=function(n) {
    x=rnorm(n)
    r=sqrt(sum(x^2))
    x/r
  }
    r=0
    for(i in 1:M)
        r = r + h(UniformOnSphere(k-1))
    return (r / M)
  }

   cb=(b^((k-1)/2))/(2^((k-1)/2-1)*gamma((k-1)/2))
   Gb=IntMonteCarlo(delta)

LugRice=1-pchisq(b*u^2,k-1) + cb/b*u^(k-3)*exp(-b*u^2/2)*(Gb-1)
   ustar=u-log(Gb)/(b*u)
NielCox=1-pchisq(b*ustar^2,k-1)
  list(Gb,LugRice,NielCox)
}
